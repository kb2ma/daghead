package router

import (
  "testing"
  "github.com/stretchr/testify/assert"
)


// 6LoRH-RPI, I flag = 2, K flag = 1, senderRank = 2816
var data = []byte{
0xF1, 0x83, 0x05, 0x0B, 0x7A, 0x55, 0x3A, 0x82, 0x54, 0x7D,
0x13, 0x76, 0x65, 0x79, 0x78, 0x46, 0x1D, 0x52, 0x44, 0x7B,
0x43, 0x76, 0x78, 0x9B, 0x02, 0xE1, 0x08, 0x00, 0x40, 0x00,
0x01, 0xBB, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46,
0x1D, 0x52, 0x44, 0x7B, 0x43, 0x76, 0x78, 0x06, 0x14, 0x00,
0x00, 0x00, 0xAA, 0xBB, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x46, 0x1D, 0x52, 0x44, 0x7B, 0x43, 0x76, 0x78,
}

// Tests reading 6LoRH-RPI header; data[0:5]
func Test6LorhRpi(t *testing.T) {
	assert.Equal(t, 69, len(data))

	ip:= new(IpData)
	err := ReadData(ip, 0x78, data)
	assert.Nil(t, err)

	assert.Equal(t, 0, ip.Fields["hop_rplInstanceID"])
	assert.Equal(t, 2816, ip.Fields["hop_senderRank"])
	assert.Equal(t, 4, ip.Fields["payload"])
}

// Tests reading IPHC; data[4:23]
func TestIphc(t *testing.T) {
	ip:= new(IpData)
	err := ReadData(ip, 0x78, data)
	err = ReadData(ip, 0x78, data[4:])
	assert.Nil(t, err)

	assert.Equal(t, 0, ip.Fields["flow_label"])
	// ICMPv6
	assert.Equal(t, 0x3A, ip.Fields["next_header"])
	assert.Equal(t, 64, ip.Fields["hop_limit"])
	source := [16]byte{0xBB, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	                   0x82, 0x54, 0x7D, 0x13, 0x76, 0x65, 0x79, 0x78}
	assert.Equal(t, source, ip.Source)
	dest := [16]byte{0xBB, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	                 0x46, 0x1D, 0x52, 0x44, 0x7B, 0x43, 0x76, 0x78}
	assert.Equal(t, dest, ip.Dest)
}

// Tests reading RPL DAO; data[4:23]
func TestRpl(t *testing.T) {
	ip:= new(IpData)
	err := ReadData(ip, 0x78, data)
	err = ReadData(ip, 0x78, data[4:])
	assert.Nil(t, err)
	ReadRpl(&ip.Source, data[27:])
}

